
#include <stdlib.h>
#include <string.h>
#include "..\src\sc_types.h"
#include "BlackLineFollower.h"
#include "BlackLineFollowerRequired.h"
/*! \file Implementation of the state machine 'BlackLineFollower'
*/

/* prototypes of all internal functions */
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_start_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_go_to_pick_node_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_going_in_middle_of_d1_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_going_to_drop_node_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_going_in_middle_of_d2_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_Idle_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates_Coordinates_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOff_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOff_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main__choice_0_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_main__choice_0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr4(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr0_tr0(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr1_tr1(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr2_tr2(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr3_tr3(const BlackLineFollower* handle);
static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr4(const BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_start_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_go_to_pick_node_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_picking_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_going_in_middle_of_d1_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_going_to_drop_node_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_dropping_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main_going_in_middle_of_d2_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_Idle_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Coordinates_Coordinates_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOff_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOff_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main__choice_0_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_main__choice_0_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr4(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr0(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr1(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr2(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr3(BlackLineFollower* handle);
static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr4(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_start(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_going_in_middle_of_d1(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_going_to_drop_node(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_main_going_in_middle_of_d2(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(BlackLineFollower* handle);
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(BlackLineFollower* handle);
static void blackLineFollower_enact_main_stop(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_start_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_go_to_pick_node_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_going_in_middle_of_d1_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_going_to_drop_node_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_going_in_middle_of_d2_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_Idle_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOff_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_West_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_North_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_South_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOff_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_stop_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Coordinates_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_default(BlackLineFollower* handle);
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_default(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_start(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_go_to_pick_node(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d1(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_going_to_drop_node(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d2(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_Idle(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Coordinates_Coordinates(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOff(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOff(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_stop(BlackLineFollower* handle);
static void blackLineFollower_exseq_main(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Coordinates(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn(BlackLineFollower* handle);
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_start(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_go_to_pick_node(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_going_in_middle_of_d1(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_going_to_drop_node(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_going_in_middle_of_d2(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_Idle(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Coordinates_Coordinates(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOff(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Orientation_East(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Orientation_West(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Orientation_North(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Orientation_South(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOff(BlackLineFollower* handle);
static void blackLineFollower_react_main_stop(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main__choice_0(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Coordinates__choice_0(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__choice_0(BlackLineFollower* handle);
static void blackLineFollower_react_main__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Coordinates__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_LineFollower__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Orientation__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn__entry_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking__exit_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping__exit_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_main__exit_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__exit_Default(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_AtTargetNode(BlackLineFollower* handle);
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(BlackLineFollower* handle);
static void blackLineFollower_clearInEvents(BlackLineFollower* handle);
static void blackLineFollower_clearOutEvents(BlackLineFollower* handle);


void blackLineFollower_init(BlackLineFollower* handle)
{
	sc_integer i;

	for (i = 0; i < BLACKLINEFOLLOWER_MAX_ORTHOGONAL_STATES; ++i)
	{
		handle->stateConfVector[i] = BlackLineFollower_last_state;
	}
	
	
	handle->stateConfVectorPosition = 0;

	blackLineFollower_clearInEvents(handle);
	blackLineFollower_clearOutEvents(handle);

	/* Default init sequence for statechart BlackLineFollower */
	handle->internal.debug = 0;
	handle->internal.turn = "forward";
	handle->internal.temp = 0;
	handle->internal.x = 1;
	handle->internal.y = 0;
	handle->internal.tx = 0;
	handle->internal.ty = 0;
	handle->ifaceInput.left_sensor = 0;
	handle->ifaceInput.right_sensor = 0;
	handle->ifaceInput.center_sensor = 0;
	handle->ifaceInput.node = 0;
	handle->ifaceInput.isnode = bool_false;
	handle->ifaceInput.left_sensed_line = bool_false;
	handle->ifaceInput.center_sensed_line = bool_false;
	handle->ifaceInput.right_sensed_line = bool_false;
	handle->ifaceInput.distance = 0;
	handle->ifaceInput.num = 0;
	handle->ifaceInput.x = 0;
	handle->ifaceInput.y = 0;

}

void blackLineFollower_enter(BlackLineFollower* handle)
{
	/* Default enter sequence for statechart BlackLineFollower */
	blackLineFollower_enseq_main_default(handle);
}

void blackLineFollower_exit(BlackLineFollower* handle)
{
	/* Default exit sequence for statechart BlackLineFollower */
	blackLineFollower_exseq_main(handle);
}

sc_boolean blackLineFollower_isActive(const BlackLineFollower* handle)
{
	sc_boolean result;
	if (handle->stateConfVector[0] != BlackLineFollower_last_state || handle->stateConfVector[1] != BlackLineFollower_last_state || handle->stateConfVector[2] != BlackLineFollower_last_state || handle->stateConfVector[3] != BlackLineFollower_last_state || handle->stateConfVector[4] != BlackLineFollower_last_state || handle->stateConfVector[5] != BlackLineFollower_last_state)
	{
		result =  bool_true;
	}
	else
	{
		result = bool_false;
	}
	return result;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean blackLineFollower_isFinal(const BlackLineFollower* handle)
{
   return bool_false;
}

static void blackLineFollower_clearInEvents(BlackLineFollower* handle)
{
	handle->internal.StartLineFollower_raised = bool_false;
	handle->internal.StopLineFollower_raised = bool_false;
	handle->internal.StartTurning_raised = bool_false;
	handle->internal.StopTurning_raised = bool_false;
	handle->internal.TurnToNextNode_raised = bool_false;
	handle->internal.OrientInEast_raised = bool_false;
	handle->internal.OrientInWest_raised = bool_false;
	handle->internal.OrientInNorth_raised = bool_false;
	handle->internal.OrientInSouth_raised = bool_false;
	handle->internal.back_raised = bool_false;
	handle->internal.left_raised = bool_false;
	handle->internal.right_raised = bool_false;
	handle->internal.front_raised = bool_false;
	handle->internal.UpdateCoordinates_raised = bool_false;
	handle->internal.gotoxy_raised = bool_false;
}

static void blackLineFollower_clearOutEvents(BlackLineFollower* handle)
{
}

void blackLineFollower_runCycle(BlackLineFollower* handle)
{
	
	blackLineFollower_clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < BLACKLINEFOLLOWER_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
		{
		case BlackLineFollower_main_PuzzleSolver_main_start :
		{
			blackLineFollower_react_main_PuzzleSolver_main_start(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_go_to_pick_node :
		{
			blackLineFollower_react_main_PuzzleSolver_main_go_to_pick_node(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment :
		{
			blackLineFollower_react_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment :
		{
			blackLineFollower_react_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d1 :
		{
			blackLineFollower_react_main_PuzzleSolver_main_going_in_middle_of_d1(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_to_drop_node :
		{
			blackLineFollower_react_main_PuzzleSolver_main_going_to_drop_node(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment :
		{
			blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment :
		{
			blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d2 :
		{
			blackLineFollower_react_main_PuzzleSolver_main_going_in_middle_of_d2(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_GoingToNextNode :
		{
			blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress :
		{
			blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction :
		{
			blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle :
		{
			blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_Idle(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Coordinates_Coordinates :
		{
			blackLineFollower_react_main_PuzzleSolver_Coordinates_Coordinates(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite :
		{
			blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine :
		{
			blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine :
		{
			blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine :
		{
			blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOff :
		{
			blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOff(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_East :
		{
			blackLineFollower_react_main_PuzzleSolver_Orientation_East(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_West :
		{
			blackLineFollower_react_main_PuzzleSolver_Orientation_West(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_North :
		{
			blackLineFollower_react_main_PuzzleSolver_Orientation_North(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_South :
		{
			blackLineFollower_react_main_PuzzleSolver_Orientation_South(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward :
		{
			blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft :
		{
			blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight :
		{
			blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack :
		{
			blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOff :
		{
			blackLineFollower_react_main_PuzzleSolver_Turn_TurningOff(handle);
			break;
		}
		case BlackLineFollower_main_stop :
		{
			blackLineFollower_react_main_stop(handle);
			break;
		}
		default:
			break;
		}
	}
	
	blackLineFollower_clearInEvents(handle);
}


sc_boolean blackLineFollower_isStateActive(const BlackLineFollower* handle, BlackLineFollowerStates state)
{
	sc_boolean result = bool_false;
	switch (state)
	{
		case BlackLineFollower_main_PuzzleSolver :
			result = (sc_boolean) (handle->stateConfVector[0] >= BlackLineFollower_main_PuzzleSolver
				&& handle->stateConfVector[0] <= BlackLineFollower_main_PuzzleSolver_Turn_TurningOff);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_start :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_start
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_go_to_pick_node :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_go_to_pick_node
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_picking :
			result = (sc_boolean) (handle->stateConfVector[0] >= BlackLineFollower_main_PuzzleSolver_main_picking
				&& handle->stateConfVector[0] <= BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d1 :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d1
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_going_to_drop_node :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_going_to_drop_node
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_dropping :
			result = (sc_boolean) (handle->stateConfVector[0] >= BlackLineFollower_main_PuzzleSolver_main_dropping
				&& handle->stateConfVector[0] <= BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d2 :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d2
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_GoingToNextNode :
			result = (sc_boolean) (handle->stateConfVector[1] == BlackLineFollower_main_PuzzleSolver_GotoTargetNode_GoingToNextNode
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction :
			result = (sc_boolean) (handle->stateConfVector[1] >= BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction
				&& handle->stateConfVector[1] <= BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction);
			break;
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress :
			result = (sc_boolean) (handle->stateConfVector[1] == BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction :
			result = (sc_boolean) (handle->stateConfVector[1] == BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle :
			result = (sc_boolean) (handle->stateConfVector[1] == BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Coordinates_Coordinates :
			result = (sc_boolean) (handle->stateConfVector[2] == BlackLineFollower_main_PuzzleSolver_Coordinates_Coordinates
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn :
			result = (sc_boolean) (handle->stateConfVector[3] >= BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn
				&& handle->stateConfVector[3] <= BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite :
			result = (sc_boolean) (handle->stateConfVector[3] == BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine :
			result = (sc_boolean) (handle->stateConfVector[3] >= BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine
				&& handle->stateConfVector[3] <= BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine :
			result = (sc_boolean) (handle->stateConfVector[3] == BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine :
			result = (sc_boolean) (handle->stateConfVector[3] == BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine :
			result = (sc_boolean) (handle->stateConfVector[3] == BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOff :
			result = (sc_boolean) (handle->stateConfVector[3] == BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOff
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Orientation_East :
			result = (sc_boolean) (handle->stateConfVector[4] == BlackLineFollower_main_PuzzleSolver_Orientation_East
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Orientation_West :
			result = (sc_boolean) (handle->stateConfVector[4] == BlackLineFollower_main_PuzzleSolver_Orientation_West
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Orientation_North :
			result = (sc_boolean) (handle->stateConfVector[4] == BlackLineFollower_main_PuzzleSolver_Orientation_North
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Orientation_South :
			result = (sc_boolean) (handle->stateConfVector[4] == BlackLineFollower_main_PuzzleSolver_Orientation_South
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn :
			result = (sc_boolean) (handle->stateConfVector[5] >= BlackLineFollower_main_PuzzleSolver_Turn_TurningOn
				&& handle->stateConfVector[5] <= BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack);
			break;
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward :
			result = (sc_boolean) (handle->stateConfVector[5] == BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft :
			result = (sc_boolean) (handle->stateConfVector[5] == BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight :
			result = (sc_boolean) (handle->stateConfVector[5] == BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack :
			result = (sc_boolean) (handle->stateConfVector[5] == BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack
			);
			break;
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOff :
			result = (sc_boolean) (handle->stateConfVector[5] == BlackLineFollower_main_PuzzleSolver_Turn_TurningOff
			);
			break;
		case BlackLineFollower_main_stop :
			result = (sc_boolean) (handle->stateConfVector[0] == BlackLineFollower_main_stop
			);
			break;
		default:
			result = bool_false;
			break;
	}
	return result;
}



sc_integer blackLineFollowerIfaceInput_get_left_sensor(const BlackLineFollower* handle)
{
	return handle->ifaceInput.left_sensor;
}
void blackLineFollowerIfaceInput_set_left_sensor(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.left_sensor = value;
}
sc_integer blackLineFollowerIfaceInput_get_right_sensor(const BlackLineFollower* handle)
{
	return handle->ifaceInput.right_sensor;
}
void blackLineFollowerIfaceInput_set_right_sensor(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.right_sensor = value;
}
sc_integer blackLineFollowerIfaceInput_get_center_sensor(const BlackLineFollower* handle)
{
	return handle->ifaceInput.center_sensor;
}
void blackLineFollowerIfaceInput_set_center_sensor(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.center_sensor = value;
}
sc_integer blackLineFollowerIfaceInput_get_node(const BlackLineFollower* handle)
{
	return handle->ifaceInput.node;
}
void blackLineFollowerIfaceInput_set_node(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.node = value;
}
sc_boolean blackLineFollowerIfaceInput_get_isnode(const BlackLineFollower* handle)
{
	return handle->ifaceInput.isnode;
}
void blackLineFollowerIfaceInput_set_isnode(BlackLineFollower* handle, sc_boolean value)
{
	handle->ifaceInput.isnode = value;
}
sc_boolean blackLineFollowerIfaceInput_get_left_sensed_line(const BlackLineFollower* handle)
{
	return handle->ifaceInput.left_sensed_line;
}
void blackLineFollowerIfaceInput_set_left_sensed_line(BlackLineFollower* handle, sc_boolean value)
{
	handle->ifaceInput.left_sensed_line = value;
}
sc_boolean blackLineFollowerIfaceInput_get_center_sensed_line(const BlackLineFollower* handle)
{
	return handle->ifaceInput.center_sensed_line;
}
void blackLineFollowerIfaceInput_set_center_sensed_line(BlackLineFollower* handle, sc_boolean value)
{
	handle->ifaceInput.center_sensed_line = value;
}
sc_boolean blackLineFollowerIfaceInput_get_right_sensed_line(const BlackLineFollower* handle)
{
	return handle->ifaceInput.right_sensed_line;
}
void blackLineFollowerIfaceInput_set_right_sensed_line(BlackLineFollower* handle, sc_boolean value)
{
	handle->ifaceInput.right_sensed_line = value;
}
sc_integer blackLineFollowerIfaceInput_get_distance(const BlackLineFollower* handle)
{
	return handle->ifaceInput.distance;
}
void blackLineFollowerIfaceInput_set_distance(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.distance = value;
}
sc_integer blackLineFollowerIfaceInput_get_num(const BlackLineFollower* handle)
{
	return handle->ifaceInput.num;
}
void blackLineFollowerIfaceInput_set_num(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.num = value;
}
sc_integer blackLineFollowerIfaceInput_get_x(const BlackLineFollower* handle)
{
	return handle->ifaceInput.x;
}
void blackLineFollowerIfaceInput_set_x(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.x = value;
}
sc_integer blackLineFollowerIfaceInput_get_y(const BlackLineFollower* handle)
{
	return handle->ifaceInput.y;
}
void blackLineFollowerIfaceInput_set_y(BlackLineFollower* handle, sc_integer value)
{
	handle->ifaceInput.y = value;
}

/* implementations of all internal functions */

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_start_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.isnode;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_go_to_pick_node_tr0_tr0(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.distance > 20) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.isnode;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_going_in_middle_of_d1_tr0_tr0(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_going_to_drop_node_tr0_tr0(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.distance > 20) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.isnode;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main_going_in_middle_of_d2_tr0_tr0(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.isnode;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_tr0_tr0(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_Turn_TurningOff);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_tr0_tr0(const BlackLineFollower* handle)
{
	return bool_true;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_Idle_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->internal.gotoxy_raised;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates_Coordinates_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->internal.UpdateCoordinates_raised;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->internal.StopLineFollower_raised;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.left_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.right_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr2_tr2(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.center_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr3_tr3(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.left_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.isnode || (handle->ifaceInput.left_sensor < 40 && handle->ifaceInput.center_sensor < 40 && handle->ifaceInput.right_sensor < 40)) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.center_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.center_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.left_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.right_sensor > 40) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOff_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->internal.StartLineFollower_raised;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->internal.right_raised || handle->internal.OrientInSouth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->internal.left_raised || handle->internal.OrientInNorth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr2_tr2(const BlackLineFollower* handle)
{
	return (handle->internal.back_raised || handle->internal.OrientInWest_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr3_tr3(const BlackLineFollower* handle)
{
	return (handle->internal.front_raised || handle->internal.OrientInEast_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->internal.right_raised || handle->internal.OrientInNorth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->internal.left_raised || handle->internal.OrientInSouth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr2_tr2(const BlackLineFollower* handle)
{
	return (handle->internal.back_raised || handle->internal.OrientInEast_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr3_tr3(const BlackLineFollower* handle)
{
	return (handle->internal.front_raised || handle->internal.OrientInWest_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->internal.right_raised || handle->internal.OrientInEast_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->internal.left_raised || handle->internal.OrientInWest_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr2_tr2(const BlackLineFollower* handle)
{
	return (handle->internal.back_raised || handle->internal.OrientInSouth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr3_tr3(const BlackLineFollower* handle)
{
	return (handle->internal.front_raised || handle->internal.OrientInNorth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->internal.right_raised || handle->internal.OrientInWest_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->internal.left_raised || handle->internal.OrientInEast_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr2_tr2(const BlackLineFollower* handle)
{
	return (handle->internal.back_raised || handle->internal.OrientInNorth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr3_tr3(const BlackLineFollower* handle)
{
	return (handle->internal.front_raised || handle->internal.OrientInSouth_raised) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_tr0_tr0(const BlackLineFollower* handle)
{
	return (!handle->ifaceInput.isnode) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.left_sensed_line;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.center_sensed_line;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->ifaceInput.center_sensed_line;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOff_tr0_tr0(const BlackLineFollower* handle)
{
	return handle->internal.StartTurning_raised;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main__choice_0_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->ifaceInput.num == -1) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_main__choice_0_tr0(const BlackLineFollower* handle)
{
	return bool_true;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->internal.tx > handle->internal.x) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->internal.tx < handle->internal.x) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr2(const BlackLineFollower* handle)
{
	return bool_true;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr0_tr0(const BlackLineFollower* handle)
{
	return (handle->internal.ty > handle->internal.y) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr1_tr1(const BlackLineFollower* handle)
{
	return (handle->internal.ty < handle->internal.y) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr3(const BlackLineFollower* handle)
{
	return bool_true;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr2(const BlackLineFollower* handle)
{
	return bool_true;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr0_tr0(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_Orientation_East);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr1_tr1(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_Orientation_West);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr2_tr2(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_Orientation_North);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr3_tr3(const BlackLineFollower* handle)
{
	return blackLineFollower_isStateActive(handle, BlackLineFollower_main_PuzzleSolver_Orientation_South);
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr4(const BlackLineFollower* handle)
{
	return bool_true;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr0_tr0(const BlackLineFollower* handle)
{
	return ((strcmp(handle->internal.turn, "forward") == 0)
	) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr1_tr1(const BlackLineFollower* handle)
{
	return ((strcmp(handle->internal.turn, "left") == 0)
	) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr2_tr2(const BlackLineFollower* handle)
{
	return ((strcmp(handle->internal.turn, "right") == 0)
	) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr3_tr3(const BlackLineFollower* handle)
{
	return ((strcmp(handle->internal.turn, "back") == 0)
	) ? bool_true : bool_false;
}

static sc_boolean blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr4(const BlackLineFollower* handle)
{
	return bool_true;
}

static void blackLineFollower_effect_main_PuzzleSolver_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver(handle);
	blackLineFollower_enseq_main_stop_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_start_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_start(handle);
	handle->internal.StopLineFollower_raised = bool_true;
	blackLineFollowerIfaceInput_get_target(handle);
	handle->internal.tx = handle->ifaceInput.x;
	handle->internal.ty = handle->ifaceInput.y;
	handle->internal.gotoxy_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_main_go_to_pick_node_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_go_to_pick_node_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_go_to_pick_node(handle);
	blackLineFollower_enseq_main_PuzzleSolver_main_picking_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_picking_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_picking(handle);
	blackLineFollower_enseq_main_PuzzleSolver_main_going_in_middle_of_d1_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(handle);
	blackLineFollowerIfaceInput_buzzer_on(handle);
	blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(handle);
	blackLineFollowerIfaceInput_break(handle, 50);
	handle->internal.UpdateCoordinates_raised = bool_true;
	handle->internal.StopLineFollower_raised = bool_true;
	blackLineFollower_react_main_PuzzleSolver_main_picking_picking__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_going_in_middle_of_d1_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d1(handle);
	blackLineFollowerIfaceInput_get_target(handle);
	handle->internal.tx = handle->ifaceInput.x;
	handle->internal.ty = handle->ifaceInput.y;
	blackLineFollower_enseq_main_PuzzleSolver_main_going_to_drop_node_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_going_to_drop_node_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_going_to_drop_node(handle);
	blackLineFollower_enseq_main_PuzzleSolver_main_dropping_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_dropping_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_dropping(handle);
	blackLineFollower_react_main_PuzzleSolver_main__choice_0(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(handle);
	blackLineFollowerIfaceInput_buzzer_on(handle);
	blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(handle);
	blackLineFollowerIfaceInput_break(handle, 255);
	handle->internal.UpdateCoordinates_raised = bool_true;
	handle->internal.StopLineFollower_raised = bool_true;
	blackLineFollowerIfaceInput_get_target(handle);
	blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main_going_in_middle_of_d2_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d2(handle);
	handle->internal.tx = handle->ifaceInput.x;
	handle->internal.ty = handle->ifaceInput.y;
	handle->internal.gotoxy_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_main_go_to_pick_node_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(handle);
	handle->internal.StopLineFollower_raised = bool_true;
	handle->internal.UpdateCoordinates_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction(handle);
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction(handle);
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_Idle_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(handle);
	blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(handle);
	blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_Idle_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_Idle(handle);
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Coordinates_Coordinates_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Coordinates_Coordinates(handle);
	blackLineFollower_react_main_PuzzleSolver_Coordinates__choice_0(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOff_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr2(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr3(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOff_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOff(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(handle);
	handle->internal.turn = "right";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_South_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(handle);
	handle->internal.turn = "left";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_North_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr2(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(handle);
	handle->internal.turn = "back";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_West_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr3(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(handle);
	handle->internal.turn = "forward";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(handle);
	handle->internal.turn = "right";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_North_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(handle);
	handle->internal.turn = "left";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_South_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr2(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(handle);
	handle->internal.turn = "back";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr3(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(handle);
	handle->internal.turn = "forward";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_West_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(handle);
	handle->internal.turn = "right";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(handle);
	handle->internal.turn = "left";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_West_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr2(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(handle);
	handle->internal.turn = "back";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_South_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr3(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(handle);
	handle->internal.turn = "forward";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_North_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(handle);
	handle->internal.turn = "right";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_West_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr1(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(handle);
	handle->internal.turn = "left";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr2(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(handle);
	handle->internal.turn = "back";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_North_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr3(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(handle);
	handle->internal.turn = "forward";
	handle->internal.StartTurning_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_South_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn(handle);
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOff_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(handle);
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(handle);
	blackLineFollowerIfaceInput_break(handle, 50);
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(handle);
	blackLineFollowerIfaceInput_break(handle, 80);
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(handle);
	blackLineFollowerIfaceInput_break(handle, 80);
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOff_tr0(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOff(handle);
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main__choice_0_tr1(BlackLineFollower* handle)
{
	blackLineFollower_react_main_PuzzleSolver_main__exit_Default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_main__choice_0_tr0(BlackLineFollower* handle)
{
	blackLineFollower_enseq_main_PuzzleSolver_main_going_in_middle_of_d2_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr0(BlackLineFollower* handle)
{
	handle->internal.OrientInSouth_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr1(BlackLineFollower* handle)
{
	handle->internal.OrientInNorth_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr2(BlackLineFollower* handle)
{
	blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr0(BlackLineFollower* handle)
{
	handle->internal.OrientInEast_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr1(BlackLineFollower* handle)
{
	handle->internal.OrientInWest_raised = bool_true;
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr3(BlackLineFollower* handle)
{
	blackLineFollowerIfaceInput_break(handle, 20);
	blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_AtTargetNode(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr2(BlackLineFollower* handle)
{
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction(handle);
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr0(BlackLineFollower* handle)
{
	handle->internal.y += 1;
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr1(BlackLineFollower* handle)
{
	handle->internal.y -= 1;
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr2(BlackLineFollower* handle)
{
	handle->internal.x -= 1;
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr3(BlackLineFollower* handle)
{
	handle->internal.x += 1;
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr4(BlackLineFollower* handle)
{
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr0(BlackLineFollower* handle)
{
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr1(BlackLineFollower* handle)
{
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr2(BlackLineFollower* handle)
{
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr3(BlackLineFollower* handle)
{
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_default(handle);
}

static void blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr4(BlackLineFollower* handle)
{
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(handle);
}

/* Entry action for state 'start'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_start(BlackLineFollower* handle)
{
	/* Entry action for state 'start'. */
	handle->internal.StartLineFollower_raised = bool_true;
}

/* Entry action for state 'going to middle of segment'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(BlackLineFollower* handle)
{
	/* Entry action for state 'going to middle of segment'. */
	handle->internal.StartLineFollower_raised = bool_true;
	blackLineFollowerIfaceInput_reset_count(handle);
	handle->ifaceInput.distance = 0;
}

/* Entry action for state 'at middle of segment'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(BlackLineFollower* handle)
{
	/* Entry action for state 'at middle of segment'. */
	blackLineFollowerIfaceInput_lcd_print(handle, 2, 5, handle->ifaceInput.num, 1);
	blackLineFollowerIfaceInput_delayms(handle, 200);
	blackLineFollowerIfaceInput_buzzer_off(handle);
}

/* Entry action for state 'going in middle of d1'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_going_in_middle_of_d1(BlackLineFollower* handle)
{
	/* Entry action for state 'going in middle of d1'. */
	handle->internal.ty = 2;
	handle->internal.gotoxy_raised = bool_true;
}

/* Entry action for state 'going to drop node'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_going_to_drop_node(BlackLineFollower* handle)
{
	/* Entry action for state 'going to drop node'. */
	handle->internal.gotoxy_raised = bool_true;
}

/* Entry action for state 'going to middle of segment'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(BlackLineFollower* handle)
{
	/* Entry action for state 'going to middle of segment'. */
	handle->internal.StartLineFollower_raised = bool_true;
	blackLineFollowerIfaceInput_reset_count(handle);
	handle->ifaceInput.distance = 0;
}

/* Entry action for state 'at middle of segment'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(BlackLineFollower* handle)
{
	/* Entry action for state 'at middle of segment'. */
	blackLineFollowerIfaceInput_lcd_print(handle, 2, 5, 0, 1);
	blackLineFollowerIfaceInput_delayms(handle, 200);
	blackLineFollowerIfaceInput_buzzer_off(handle);
}

/* Entry action for state 'going in middle of d2'. */
static void blackLineFollower_enact_main_PuzzleSolver_main_going_in_middle_of_d2(BlackLineFollower* handle)
{
	/* Entry action for state 'going in middle of d2'. */
	handle->internal.ty = 2;
	handle->internal.gotoxy_raised = bool_true;
}

/* Entry action for state 'GoingToNextNode'. */
static void blackLineFollower_enact_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(BlackLineFollower* handle)
{
	/* Entry action for state 'GoingToNextNode'. */
	handle->internal.StartLineFollower_raised = bool_true;
}

/* Entry action for state 'AllSensorDetectWhite'. */
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(BlackLineFollower* handle)
{
	/* Entry action for state 'AllSensorDetectWhite'. */
	blackLineFollowerIfaceInput_forward(handle);
	blackLineFollowerIfaceInput_velocity(handle, 180, 180);
}

/* Entry action for state 'RightSensorOnLine'. */
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(BlackLineFollower* handle)
{
	/* Entry action for state 'RightSensorOnLine'. */
	blackLineFollowerIfaceInput_soft_right(handle);
	blackLineFollowerIfaceInput_velocity(handle, 150, 150);
}

/* Entry action for state 'LeftSensorOnLine'. */
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(BlackLineFollower* handle)
{
	/* Entry action for state 'LeftSensorOnLine'. */
	blackLineFollowerIfaceInput_soft_left(handle);
	blackLineFollowerIfaceInput_velocity(handle, 100, 100);
}

/* Entry action for state 'CenterSensorOnLine'. */
static void blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(BlackLineFollower* handle)
{
	/* Entry action for state 'CenterSensorOnLine'. */
	blackLineFollowerIfaceInput_soft_right(handle);
	blackLineFollowerIfaceInput_velocity(handle, 130, 130);
}

/* Entry action for state 'GoingForward'. */
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(BlackLineFollower* handle)
{
	/* Entry action for state 'GoingForward'. */
	blackLineFollowerIfaceInput_forward(handle);
}

/* Entry action for state 'TurningLeft'. */
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(BlackLineFollower* handle)
{
	/* Entry action for state 'TurningLeft'. */
	blackLineFollowerIfaceInput_forward_mm(handle, 70);
	blackLineFollowerIfaceInput_break(handle, 255);
	blackLineFollowerIfaceInput_velocity(handle, 130, 130);
	blackLineFollowerIfaceInput_left_degrees(handle, 55);
	handle->ifaceInput.left_sensed_line = bool_false;
	blackLineFollowerIfaceInput_left(handle);
}

/* Entry action for state 'TurningRight'. */
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(BlackLineFollower* handle)
{
	/* Entry action for state 'TurningRight'. */
	blackLineFollowerIfaceInput_forward_mm(handle, 55);
	blackLineFollowerIfaceInput_break(handle, 255);
	blackLineFollowerIfaceInput_velocity(handle, 130, 130);
	blackLineFollowerIfaceInput_right_degrees(handle, 55);
	handle->ifaceInput.center_sensed_line = bool_false;
	blackLineFollowerIfaceInput_right(handle);
}

/* Entry action for state 'TurningBack'. */
static void blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(BlackLineFollower* handle)
{
	/* Entry action for state 'TurningBack'. */
	blackLineFollowerIfaceInput_forward_mm(handle, 40);
	blackLineFollowerIfaceInput_break(handle, 255);
	blackLineFollowerIfaceInput_velocity(handle, 100, 130);
	blackLineFollowerIfaceInput_right_degrees(handle, 120);
	handle->ifaceInput.center_sensed_line = bool_false;
	blackLineFollowerIfaceInput_right(handle);
}

/* Entry action for state 'stop'. */
static void blackLineFollower_enact_main_stop(BlackLineFollower* handle)
{
	/* Entry action for state 'stop'. */
	blackLineFollowerIfaceInput_velocity(handle, 0, 0);
	blackLineFollowerIfaceInput_buzzer_on(handle);
	blackLineFollowerIfaceInput_delayms(handle, 2000);
	blackLineFollowerIfaceInput_buzzer_off(handle);
}

/* 'default' enter sequence for state PuzzleSolver */
static void blackLineFollower_enseq_main_PuzzleSolver_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state PuzzleSolver */
	blackLineFollower_enseq_main_PuzzleSolver_main_default(handle);
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_default(handle);
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_default(handle);
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_default(handle);
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_default(handle);
	blackLineFollower_enseq_main_PuzzleSolver_Turn_default(handle);
}

/* 'default' enter sequence for state start */
static void blackLineFollower_enseq_main_PuzzleSolver_main_start_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state start */
	blackLineFollower_enact_main_PuzzleSolver_main_start(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_start;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state go to pick node */
static void blackLineFollower_enseq_main_PuzzleSolver_main_go_to_pick_node_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state go to pick node */
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_go_to_pick_node;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state picking */
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state picking */
	blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_default(handle);
}

/* 'default' enter sequence for state going to middle of segment */
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state going to middle of segment */
	blackLineFollower_enact_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state at middle of segment */
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state at middle of segment */
	blackLineFollower_enact_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state going in middle of d1 */
static void blackLineFollower_enseq_main_PuzzleSolver_main_going_in_middle_of_d1_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state going in middle of d1 */
	blackLineFollower_enact_main_PuzzleSolver_main_going_in_middle_of_d1(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d1;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state going to drop node */
static void blackLineFollower_enseq_main_PuzzleSolver_main_going_to_drop_node_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state going to drop node */
	blackLineFollower_enact_main_PuzzleSolver_main_going_to_drop_node(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_going_to_drop_node;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state dropping */
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state dropping */
	blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_default(handle);
}

/* 'default' enter sequence for state going to middle of segment */
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state going to middle of segment */
	blackLineFollower_enact_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state at middle of segment */
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state at middle of segment */
	blackLineFollower_enact_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state going in middle of d2 */
static void blackLineFollower_enseq_main_PuzzleSolver_main_going_in_middle_of_d2_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state going in middle of d2 */
	blackLineFollower_enact_main_PuzzleSolver_main_going_in_middle_of_d2(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d2;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state GoingToNextNode */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state GoingToNextNode */
	blackLineFollower_enact_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(handle);
	handle->stateConfVector[1] = BlackLineFollower_main_PuzzleSolver_GotoTargetNode_GoingToNextNode;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state NodeAction */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state NodeAction */
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_default(handle);
}

/* 'default' enter sequence for state NodeActionInProgress */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state NodeActionInProgress */
	handle->stateConfVector[1] = BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state StartNodeAction */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state StartNodeAction */
	handle->stateConfVector[1] = BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Idle */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_Idle_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state Idle */
	handle->stateConfVector[1] = BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Coordinates */
static void blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state Coordinates */
	handle->stateConfVector[2] = BlackLineFollower_main_PuzzleSolver_Coordinates_Coordinates;
	handle->stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state LineFollowerOn */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state LineFollowerOn */
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_default(handle);
}

/* 'default' enter sequence for state AllSensorDetectWhite */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state AllSensorDetectWhite */
	blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
	handle->stateConfVector[3] = BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite;
	handle->stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state RightSensorOnLine */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state RightSensorOnLine */
	blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
	handle->stateConfVector[3] = BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine;
	handle->stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state LeftSensorOnLine */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state LeftSensorOnLine */
	blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
	handle->stateConfVector[3] = BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine;
	handle->stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state CenterSensorOnLine */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state CenterSensorOnLine */
	blackLineFollower_enact_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
	handle->stateConfVector[3] = BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine;
	handle->stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state LineFollowerOff */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOff_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state LineFollowerOff */
	handle->stateConfVector[3] = BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOff;
	handle->stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state East */
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state East */
	handle->stateConfVector[4] = BlackLineFollower_main_PuzzleSolver_Orientation_East;
	handle->stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state West */
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_West_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state West */
	handle->stateConfVector[4] = BlackLineFollower_main_PuzzleSolver_Orientation_West;
	handle->stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state North */
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_North_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state North */
	handle->stateConfVector[4] = BlackLineFollower_main_PuzzleSolver_Orientation_North;
	handle->stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state South */
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_South_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state South */
	handle->stateConfVector[4] = BlackLineFollower_main_PuzzleSolver_Orientation_South;
	handle->stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state TurningOn */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state TurningOn */
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_default(handle);
}

/* 'default' enter sequence for state GoingForward */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state GoingForward */
	blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(handle);
	handle->stateConfVector[5] = BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward;
	handle->stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state TurningLeft */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state TurningLeft */
	blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(handle);
	handle->stateConfVector[5] = BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft;
	handle->stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state TurningRight */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state TurningRight */
	blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(handle);
	handle->stateConfVector[5] = BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight;
	handle->stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state TurningBack */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state TurningBack */
	blackLineFollower_enact_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(handle);
	handle->stateConfVector[5] = BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack;
	handle->stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state TurningOff */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOff_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state TurningOff */
	handle->stateConfVector[5] = BlackLineFollower_main_PuzzleSolver_Turn_TurningOff;
	handle->stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state stop */
static void blackLineFollower_enseq_main_stop_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for state stop */
	blackLineFollower_enact_main_stop(handle);
	handle->stateConfVector[0] = BlackLineFollower_main_stop;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region main */
static void blackLineFollower_enseq_main_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region main */
	blackLineFollower_react_main__entry_Default(handle);
}

/* 'default' enter sequence for region main */
static void blackLineFollower_enseq_main_PuzzleSolver_main_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region main */
	blackLineFollower_react_main_PuzzleSolver_main__entry_Default(handle);
}

/* 'default' enter sequence for region picking */
static void blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region picking */
	blackLineFollower_react_main_PuzzleSolver_main_picking_picking__entry_Default(handle);
}

/* 'default' enter sequence for region dropping */
static void blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region dropping */
	blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping__entry_Default(handle);
}

/* 'default' enter sequence for region GotoTargetNode */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region GotoTargetNode */
	blackLineFollower_react_main_PuzzleSolver_GotoTargetNode__entry_Default(handle);
}

/* 'default' enter sequence for region ToNextNode */
static void blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region ToNextNode */
	blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__entry_Default(handle);
}

/* 'default' enter sequence for region Coordinates */
static void blackLineFollower_enseq_main_PuzzleSolver_Coordinates_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region Coordinates */
	blackLineFollower_react_main_PuzzleSolver_Coordinates__entry_Default(handle);
}

/* 'default' enter sequence for region LineFollower */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region LineFollower */
	blackLineFollower_react_main_PuzzleSolver_LineFollower__entry_Default(handle);
}

/* 'default' enter sequence for region s */
static void blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region s */
	blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s__entry_Default(handle);
}

/* 'default' enter sequence for region Orientation */
static void blackLineFollower_enseq_main_PuzzleSolver_Orientation_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region Orientation */
	blackLineFollower_react_main_PuzzleSolver_Orientation__entry_Default(handle);
}

/* 'default' enter sequence for region Turn */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region Turn */
	blackLineFollower_react_main_PuzzleSolver_Turn__entry_Default(handle);
}

/* 'default' enter sequence for region ss */
static void blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOn_ss_default(BlackLineFollower* handle)
{
	/* 'default' enter sequence for region ss */
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__entry_Default(handle);
}

/* Default exit sequence for state PuzzleSolver */
static void blackLineFollower_exseq_main_PuzzleSolver(BlackLineFollower* handle)
{
	/* Default exit sequence for state PuzzleSolver */
	blackLineFollower_exseq_main_PuzzleSolver_main(handle);
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode(handle);
	blackLineFollower_exseq_main_PuzzleSolver_Coordinates(handle);
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower(handle);
	blackLineFollower_exseq_main_PuzzleSolver_Orientation(handle);
	blackLineFollower_exseq_main_PuzzleSolver_Turn(handle);
}

/* Default exit sequence for state start */
static void blackLineFollower_exseq_main_PuzzleSolver_main_start(BlackLineFollower* handle)
{
	/* Default exit sequence for state start */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state go to pick node */
static void blackLineFollower_exseq_main_PuzzleSolver_main_go_to_pick_node(BlackLineFollower* handle)
{
	/* Default exit sequence for state go to pick node */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state picking */
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking(BlackLineFollower* handle)
{
	/* Default exit sequence for state picking */
	blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking(handle);
}

/* Default exit sequence for state going to middle of segment */
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(BlackLineFollower* handle)
{
	/* Default exit sequence for state going to middle of segment */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state at middle of segment */
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(BlackLineFollower* handle)
{
	/* Default exit sequence for state at middle of segment */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state going in middle of d1 */
static void blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d1(BlackLineFollower* handle)
{
	/* Default exit sequence for state going in middle of d1 */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state going to drop node */
static void blackLineFollower_exseq_main_PuzzleSolver_main_going_to_drop_node(BlackLineFollower* handle)
{
	/* Default exit sequence for state going to drop node */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state dropping */
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping(BlackLineFollower* handle)
{
	/* Default exit sequence for state dropping */
	blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping(handle);
}

/* Default exit sequence for state going to middle of segment */
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(BlackLineFollower* handle)
{
	/* Default exit sequence for state going to middle of segment */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state at middle of segment */
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(BlackLineFollower* handle)
{
	/* Default exit sequence for state at middle of segment */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state going in middle of d2 */
static void blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d2(BlackLineFollower* handle)
{
	/* Default exit sequence for state going in middle of d2 */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state GoingToNextNode */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(BlackLineFollower* handle)
{
	/* Default exit sequence for state GoingToNextNode */
	handle->stateConfVector[1] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 1;
}

/* Default exit sequence for state NodeAction */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction(BlackLineFollower* handle)
{
	/* Default exit sequence for state NodeAction */
	blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode(handle);
}

/* Default exit sequence for state NodeActionInProgress */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(BlackLineFollower* handle)
{
	/* Default exit sequence for state NodeActionInProgress */
	handle->stateConfVector[1] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 1;
}

/* Default exit sequence for state StartNodeAction */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(BlackLineFollower* handle)
{
	/* Default exit sequence for state StartNodeAction */
	handle->stateConfVector[1] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 1;
}

/* Default exit sequence for state Idle */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_Idle(BlackLineFollower* handle)
{
	/* Default exit sequence for state Idle */
	handle->stateConfVector[1] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 1;
}

/* Default exit sequence for state Coordinates */
static void blackLineFollower_exseq_main_PuzzleSolver_Coordinates_Coordinates(BlackLineFollower* handle)
{
	/* Default exit sequence for state Coordinates */
	handle->stateConfVector[2] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 2;
}

/* Default exit sequence for state LineFollowerOn */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn(BlackLineFollower* handle)
{
	/* Default exit sequence for state LineFollowerOn */
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s(handle);
}

/* Default exit sequence for state AllSensorDetectWhite */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(BlackLineFollower* handle)
{
	/* Default exit sequence for state AllSensorDetectWhite */
	handle->stateConfVector[3] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 3;
}

/* Default exit sequence for state Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine(BlackLineFollower* handle)
{
	/* Default exit sequence for state Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine */
	blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region(handle);
}

/* Default exit sequence for state RightSensorOnLine */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(BlackLineFollower* handle)
{
	/* Default exit sequence for state RightSensorOnLine */
	handle->stateConfVector[3] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 3;
}

/* Default exit sequence for state LeftSensorOnLine */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(BlackLineFollower* handle)
{
	/* Default exit sequence for state LeftSensorOnLine */
	handle->stateConfVector[3] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 3;
}

/* Default exit sequence for state CenterSensorOnLine */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(BlackLineFollower* handle)
{
	/* Default exit sequence for state CenterSensorOnLine */
	handle->stateConfVector[3] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 3;
}

/* Default exit sequence for state LineFollowerOff */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOff(BlackLineFollower* handle)
{
	/* Default exit sequence for state LineFollowerOff */
	handle->stateConfVector[3] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 3;
}

/* Default exit sequence for state East */
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(BlackLineFollower* handle)
{
	/* Default exit sequence for state East */
	handle->stateConfVector[4] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 4;
}

/* Default exit sequence for state West */
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(BlackLineFollower* handle)
{
	/* Default exit sequence for state West */
	handle->stateConfVector[4] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 4;
}

/* Default exit sequence for state North */
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(BlackLineFollower* handle)
{
	/* Default exit sequence for state North */
	handle->stateConfVector[4] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 4;
}

/* Default exit sequence for state South */
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(BlackLineFollower* handle)
{
	/* Default exit sequence for state South */
	handle->stateConfVector[4] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 4;
}

/* Default exit sequence for state TurningOn */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn(BlackLineFollower* handle)
{
	/* Default exit sequence for state TurningOn */
	blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss(handle);
}

/* Default exit sequence for state GoingForward */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(BlackLineFollower* handle)
{
	/* Default exit sequence for state GoingForward */
	handle->stateConfVector[5] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 5;
}

/* Default exit sequence for state TurningLeft */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(BlackLineFollower* handle)
{
	/* Default exit sequence for state TurningLeft */
	handle->stateConfVector[5] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 5;
}

/* Default exit sequence for state TurningRight */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(BlackLineFollower* handle)
{
	/* Default exit sequence for state TurningRight */
	handle->stateConfVector[5] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 5;
}

/* Default exit sequence for state TurningBack */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(BlackLineFollower* handle)
{
	/* Default exit sequence for state TurningBack */
	handle->stateConfVector[5] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 5;
}

/* Default exit sequence for state TurningOff */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOff(BlackLineFollower* handle)
{
	/* Default exit sequence for state TurningOff */
	handle->stateConfVector[5] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 5;
}

/* Default exit sequence for state stop */
static void blackLineFollower_exseq_main_stop(BlackLineFollower* handle)
{
	/* Default exit sequence for state stop */
	handle->stateConfVector[0] = BlackLineFollower_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for region main */
static void blackLineFollower_exseq_main(BlackLineFollower* handle)
{
	/* Default exit sequence for region main */
	/* Handle exit of all possible states (of BlackLineFollower.main) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case BlackLineFollower_main_PuzzleSolver_main_start :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_start(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_go_to_pick_node :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_go_to_pick_node(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d1 :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d1(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_to_drop_node :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_going_to_drop_node(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d2 :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d2(handle);
			break;
		}
		case BlackLineFollower_main_stop :
		{
			blackLineFollower_exseq_main_stop(handle);
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of BlackLineFollower.main) at position 1... */
	switch(handle->stateConfVector[ 1 ])
	{
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_GoingToNextNode :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_Idle(handle);
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of BlackLineFollower.main) at position 2... */
	switch(handle->stateConfVector[ 2 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Coordinates_Coordinates :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Coordinates_Coordinates(handle);
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of BlackLineFollower.main) at position 3... */
	switch(handle->stateConfVector[ 3 ])
	{
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOff :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOff(handle);
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of BlackLineFollower.main) at position 4... */
	switch(handle->stateConfVector[ 4 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Orientation_East :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_West :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_North :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_South :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(handle);
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of BlackLineFollower.main) at position 5... */
	switch(handle->stateConfVector[ 5 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOff :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOff(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region main */
static void blackLineFollower_exseq_main_PuzzleSolver_main(BlackLineFollower* handle)
{
	/* Default exit sequence for region main */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.main) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case BlackLineFollower_main_PuzzleSolver_main_start :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_start(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_go_to_pick_node :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_go_to_pick_node(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d1 :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d1(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_to_drop_node :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_going_to_drop_node(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_going_in_middle_of_d2 :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_going_in_middle_of_d2(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region picking */
static void blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking(BlackLineFollower* handle)
{
	/* Default exit sequence for region picking */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.main.picking.picking) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_picking_picking_at_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region dropping */
static void blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping(BlackLineFollower* handle)
{
	/* Default exit sequence for region dropping */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.main.dropping.dropping) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment :
		{
			blackLineFollower_exseq_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region GotoTargetNode */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode(BlackLineFollower* handle)
{
	/* Default exit sequence for region GotoTargetNode */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.GotoTargetNode) at position 1... */
	switch(handle->stateConfVector[ 1 ])
	{
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_GoingToNextNode :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_Idle :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_Idle(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region ToNextNode */
static void blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode(BlackLineFollower* handle)
{
	/* Default exit sequence for region ToNextNode */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.GotoTargetNode.NodeAction.ToNextNode) at position 1... */
	switch(handle->stateConfVector[ 1 ])
	{
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction :
		{
			blackLineFollower_exseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region Coordinates */
static void blackLineFollower_exseq_main_PuzzleSolver_Coordinates(BlackLineFollower* handle)
{
	/* Default exit sequence for region Coordinates */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.Coordinates) at position 2... */
	switch(handle->stateConfVector[ 2 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Coordinates_Coordinates :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Coordinates_Coordinates(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region LineFollower */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower(BlackLineFollower* handle)
{
	/* Default exit sequence for region LineFollower */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.LineFollower) at position 3... */
	switch(handle->stateConfVector[ 3 ])
	{
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOff :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOff(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region s */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s(BlackLineFollower* handle)
{
	/* Default exit sequence for region s */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.LineFollower.LineFollowerOn.s) at position 3... */
	switch(handle->stateConfVector[ 3 ])
	{
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region inner region */
static void blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region(BlackLineFollower* handle)
{
	/* Default exit sequence for region inner region */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.LineFollower.LineFollowerOn.s.Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine.inner_region) at position 3... */
	switch(handle->stateConfVector[ 3 ])
	{
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine :
		{
			blackLineFollower_exseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region Orientation */
static void blackLineFollower_exseq_main_PuzzleSolver_Orientation(BlackLineFollower* handle)
{
	/* Default exit sequence for region Orientation */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.Orientation) at position 4... */
	switch(handle->stateConfVector[ 4 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Orientation_East :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_East(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_West :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_West(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_North :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_North(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Orientation_South :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Orientation_South(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region Turn */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn(BlackLineFollower* handle)
{
	/* Default exit sequence for region Turn */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.Turn) at position 5... */
	switch(handle->stateConfVector[ 5 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOff :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOff(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region ss */
static void blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss(BlackLineFollower* handle)
{
	/* Default exit sequence for region ss */
	/* Handle exit of all possible states (of BlackLineFollower.main.PuzzleSolver.Turn.TurningOn.ss) at position 5... */
	switch(handle->stateConfVector[ 5 ])
	{
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(handle);
			break;
		}
		case BlackLineFollower_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack :
		{
			blackLineFollower_exseq_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(handle);
			break;
		}
		default: break;
	}
}

/* The reactions of state start. */
static void blackLineFollower_react_main_PuzzleSolver_main_start(BlackLineFollower* handle)
{
	/* The reactions of state start. */
	if (blackLineFollower_check_main_PuzzleSolver_main_start_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_start_tr0(handle);
	} 
}

/* The reactions of state go to pick node. */
static void blackLineFollower_react_main_PuzzleSolver_main_go_to_pick_node(BlackLineFollower* handle)
{
	/* The reactions of state go to pick node. */
	if (blackLineFollower_check_main_PuzzleSolver_main_go_to_pick_node_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_go_to_pick_node_tr0(handle);
	} 
}

/* The reactions of state going to middle of segment. */
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment(BlackLineFollower* handle)
{
	/* The reactions of state going to middle of segment. */
	if (blackLineFollower_check_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_tr0(handle);
	} 
}

/* The reactions of state at middle of segment. */
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking_at_middle_of_segment(BlackLineFollower* handle)
{
	/* The reactions of state at middle of segment. */
	if (blackLineFollower_check_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_picking_picking_at_middle_of_segment_tr0(handle);
	} 
}

/* The reactions of state going in middle of d1. */
static void blackLineFollower_react_main_PuzzleSolver_main_going_in_middle_of_d1(BlackLineFollower* handle)
{
	/* The reactions of state going in middle of d1. */
	if (blackLineFollower_check_main_PuzzleSolver_main_going_in_middle_of_d1_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_going_in_middle_of_d1_tr0(handle);
	} 
}

/* The reactions of state going to drop node. */
static void blackLineFollower_react_main_PuzzleSolver_main_going_to_drop_node(BlackLineFollower* handle)
{
	/* The reactions of state going to drop node. */
	if (blackLineFollower_check_main_PuzzleSolver_main_going_to_drop_node_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_going_to_drop_node_tr0(handle);
	} 
}

/* The reactions of state going to middle of segment. */
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment(BlackLineFollower* handle)
{
	/* The reactions of state going to middle of segment. */
	if (blackLineFollower_check_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_tr0(handle);
	} 
}

/* The reactions of state at middle of segment. */
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment(BlackLineFollower* handle)
{
	/* The reactions of state at middle of segment. */
	if (blackLineFollower_check_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_dropping_dropping_at_middle_of_segment_tr0(handle);
	} 
}

/* The reactions of state going in middle of d2. */
static void blackLineFollower_react_main_PuzzleSolver_main_going_in_middle_of_d2(BlackLineFollower* handle)
{
	/* The reactions of state going in middle of d2. */
	if (blackLineFollower_check_main_PuzzleSolver_main_going_in_middle_of_d2_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main_going_in_middle_of_d2_tr0(handle);
	} 
}

/* The reactions of state GoingToNextNode. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_GoingToNextNode(BlackLineFollower* handle)
{
	/* The reactions of state GoingToNextNode. */
	if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_GoingToNextNode_tr0(handle);
	} 
}

/* The reactions of state NodeActionInProgress. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress(BlackLineFollower* handle)
{
	/* The reactions of state NodeActionInProgress. */
	if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_NodeActionInProgress_tr0(handle);
	} 
}

/* The reactions of state StartNodeAction. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction(BlackLineFollower* handle)
{
	/* The reactions of state StartNodeAction. */
	blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_tr0(handle);
}

/* The reactions of state Idle. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_Idle(BlackLineFollower* handle)
{
	/* The reactions of state Idle. */
	if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_Idle_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_Idle_tr0(handle);
	} 
}

/* The reactions of state Coordinates. */
static void blackLineFollower_react_main_PuzzleSolver_Coordinates_Coordinates(BlackLineFollower* handle)
{
	/* The reactions of state Coordinates. */
	if (blackLineFollower_check_main_PuzzleSolver_Coordinates_Coordinates_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Coordinates_Coordinates_tr0(handle);
	} 
}

/* The reactions of state AllSensorDetectWhite. */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite(BlackLineFollower* handle)
{
	/* The reactions of state AllSensorDetectWhite. */
	if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr0_tr0(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr0(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr1_tr1(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr1(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr2_tr2(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr2(handle);
				}  else
				{
					if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr3_tr3(handle) == bool_true)
					{ 
						blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_tr3(handle);
					} 
				}
			}
		}
	}
}

/* The reactions of state RightSensorOnLine. */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine(BlackLineFollower* handle)
{
	/* The reactions of state RightSensorOnLine. */
	if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0_tr0(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_tr0_tr0(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_RightSensorOnLine_tr0(handle);
			} 
		}
	}
}

/* The reactions of state LeftSensorOnLine. */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine(BlackLineFollower* handle)
{
	/* The reactions of state LeftSensorOnLine. */
	if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0_tr0(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_tr0_tr0(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_LeftSensorOnLine_tr0(handle);
			} 
		}
	}
}

/* The reactions of state CenterSensorOnLine. */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine(BlackLineFollower* handle)
{
	/* The reactions of state CenterSensorOnLine. */
	if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0_tr0(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_tr0(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr0_tr0(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr0(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr1_tr1(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOn_s_Composite_RightSensorOnLine_LeftSensorOnLine_CenterSensorOnLine_inner_region_CenterSensorOnLine_tr1(handle);
				} 
			}
		}
	}
}

/* The reactions of state LineFollowerOff. */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOff(BlackLineFollower* handle)
{
	/* The reactions of state LineFollowerOff. */
	if (blackLineFollower_check_main_PuzzleSolver_LineFollower_LineFollowerOff_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_LineFollower_LineFollowerOff_tr0(handle);
	} 
}

/* The reactions of state East. */
static void blackLineFollower_react_main_PuzzleSolver_Orientation_East(BlackLineFollower* handle)
{
	/* The reactions of state East. */
	if (blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr1(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr2_tr2(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr2(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_Orientation_East_tr3_tr3(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_Orientation_East_tr3(handle);
				} 
			}
		}
	}
}

/* The reactions of state West. */
static void blackLineFollower_react_main_PuzzleSolver_Orientation_West(BlackLineFollower* handle)
{
	/* The reactions of state West. */
	if (blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr1(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr2_tr2(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr2(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_Orientation_West_tr3_tr3(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_Orientation_West_tr3(handle);
				} 
			}
		}
	}
}

/* The reactions of state North. */
static void blackLineFollower_react_main_PuzzleSolver_Orientation_North(BlackLineFollower* handle)
{
	/* The reactions of state North. */
	if (blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr1(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr2_tr2(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr2(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_Orientation_North_tr3_tr3(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_Orientation_North_tr3(handle);
				} 
			}
		}
	}
}

/* The reactions of state South. */
static void blackLineFollower_react_main_PuzzleSolver_Orientation_South(BlackLineFollower* handle)
{
	/* The reactions of state South. */
	if (blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr1(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr2_tr2(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr2(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_Orientation_South_tr3_tr3(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_Orientation_South_tr3(handle);
				} 
			}
		}
	}
}

/* The reactions of state GoingForward. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward(BlackLineFollower* handle)
{
	/* The reactions of state GoingForward. */
	if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_GoingForward_tr0(handle);
	} 
}

/* The reactions of state TurningLeft. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft(BlackLineFollower* handle)
{
	/* The reactions of state TurningLeft. */
	if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningLeft_tr0(handle);
	} 
}

/* The reactions of state TurningRight. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight(BlackLineFollower* handle)
{
	/* The reactions of state TurningRight. */
	if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningRight_tr0(handle);
	} 
}

/* The reactions of state TurningBack. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack(BlackLineFollower* handle)
{
	/* The reactions of state TurningBack. */
	if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss_TurningBack_tr0(handle);
	} 
}

/* The reactions of state TurningOff. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOff(BlackLineFollower* handle)
{
	/* The reactions of state TurningOff. */
	if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOff_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOff_tr0(handle);
	} 
}

/* The reactions of state stop. */
static void blackLineFollower_react_main_stop(BlackLineFollower* handle)
{
	/* The reactions of state stop. */
}

/* The reactions of state null. */
static void blackLineFollower_react_main_PuzzleSolver_main__choice_0(BlackLineFollower* handle)
{
	/* The reactions of state null. */
	if (blackLineFollower_check_main_PuzzleSolver_main__choice_0_tr1_tr1(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_main__choice_0_tr1(handle);
	}  else
	{
		blackLineFollower_effect_main_PuzzleSolver_main__choice_0_tr0(handle);
	}
}

/* The reactions of state null. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0(BlackLineFollower* handle)
{
	/* The reactions of state null. */
	if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr1(handle);
		}  else
		{
			blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_0_tr2(handle);
		}
	}
}

/* The reactions of state null. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1(BlackLineFollower* handle)
{
	/* The reactions of state null. */
	if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr1(handle);
		}  else
		{
			blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__choice_1_tr3(handle);
		}
	}
}

/* The reactions of state null. */
static void blackLineFollower_react_main_PuzzleSolver_Coordinates__choice_0(BlackLineFollower* handle)
{
	/* The reactions of state null. */
	if (blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr1(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr2_tr2(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr2(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_Coordinates__choice_0_tr3_tr3(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr3(handle);
				}  else
				{
					blackLineFollower_effect_main_PuzzleSolver_Coordinates__choice_0_tr4(handle);
				}
			}
		}
	}
}

/* The reactions of state null. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__choice_0(BlackLineFollower* handle)
{
	/* The reactions of state null. */
	if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr0_tr0(handle) == bool_true)
	{ 
		blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr0(handle);
	}  else
	{
		if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr1_tr1(handle) == bool_true)
		{ 
			blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr1(handle);
		}  else
		{
			if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr2_tr2(handle) == bool_true)
			{ 
				blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr2(handle);
			}  else
			{
				if (blackLineFollower_check_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr3_tr3(handle) == bool_true)
				{ 
					blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr3(handle);
				}  else
				{
					blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_ss__choice_0_tr4(handle);
				}
			}
		}
	}
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_main__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_main_start_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_main_picking_picking_going_to_middle_of_segment_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_main_dropping_dropping_going_to_middle_of_segment_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_Idle_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_StartNodeAction_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_Coordinates__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_Coordinates_Coordinates_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower_LineFollowerOn_s__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOn_s_AllSensorDetectWhite_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_LineFollower__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_LineFollower_LineFollowerOff_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_Orientation__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_Orientation_East_default(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollowerIfaceInput_velocity(handle, 180, 180);
	blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__choice_0(handle);
}

/* Default react sequence for initial entry  */
static void blackLineFollower_react_main_PuzzleSolver_Turn__entry_Default(BlackLineFollower* handle)
{
	/* Default react sequence for initial entry  */
	blackLineFollower_enseq_main_PuzzleSolver_Turn_TurningOff_default(handle);
}

/* The reactions of exit default. */
static void blackLineFollower_react_main_PuzzleSolver_main_picking_picking__exit_Default(BlackLineFollower* handle)
{
	/* The reactions of exit default. */
	blackLineFollower_effect_main_PuzzleSolver_main_picking_tr0(handle);
}

/* The reactions of exit default. */
static void blackLineFollower_react_main_PuzzleSolver_main_dropping_dropping__exit_Default(BlackLineFollower* handle)
{
	/* The reactions of exit default. */
	blackLineFollower_effect_main_PuzzleSolver_main_dropping_tr0(handle);
}

/* The reactions of exit default. */
static void blackLineFollower_react_main_PuzzleSolver_main__exit_Default(BlackLineFollower* handle)
{
	/* The reactions of exit default. */
	blackLineFollower_effect_main_PuzzleSolver_tr0(handle);
}

/* The reactions of exit default. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode__exit_Default(BlackLineFollower* handle)
{
	/* The reactions of exit default. */
	blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_tr0(handle);
}

/* The reactions of exit AtTargetNode. */
static void blackLineFollower_react_main_PuzzleSolver_GotoTargetNode_NodeAction_ToNextNode_AtTargetNode(BlackLineFollower* handle)
{
	/* The reactions of exit AtTargetNode. */
	blackLineFollower_effect_main_PuzzleSolver_GotoTargetNode_NodeAction_tr1(handle);
}

/* The reactions of exit default. */
static void blackLineFollower_react_main_PuzzleSolver_Turn_TurningOn_ss__exit_Default(BlackLineFollower* handle)
{
	/* The reactions of exit default. */
	blackLineFollower_effect_main_PuzzleSolver_Turn_TurningOn_tr0(handle);
}


